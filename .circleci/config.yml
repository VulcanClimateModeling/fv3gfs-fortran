version: 2.1
orbs:
  gcp-gcr: circleci/gcp-gcr@0.6.1
jobs:
  build_default:
    machine:
      docker_layer_caching: true
    environment:
      FV3CONFIG_CACHE_DIR: /tmp/.fv3config
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
    steps:
      - checkout
      - run:
          name: "gcloud auth"
          command: |
            echo $ENCODED_GCR_KEY | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS 
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update
      - run: make build
      - restore_cache:
          keys:
            - v1.3-inputdata-{{ checksum "download_inputdata.sh" }}-{{ checksum "requirements.txt"}}
      - run: 
          name: "Install Python test dependencies"
          command: |
            pyenv versions
            [ -d /opt/circleci/.pyenv/versions/3.6.2 ] || pyenv install 3.6.2
            pyenv global 3.6.2
            pip install -r requirements.txt
      - run: bash download_inputdata.sh
      - run: python3 -m fv3config.download_data
      - save_cache:
          paths:
            - ./fv3gfs-data-docker_2020-01-13.tar.gz
            - $FV3CONFIG_CACHE_DIR
            - /opt/circleci/.pyenv/versions/3.6.2
          key: v1.3-inputdata-{{ checksum "download_inputdata.sh" }}-{{ checksum "requirements.txt"}}
      # tests
       - run: 
          name: "Run pytest tests"
          # -s to avoid capturing stdout/stderr of md5sum call
          command: |
            pytest tests/pytest -s --refdir $(pwd)/tests/pytest/reference/circleci
      - run:
          name: "Delete data files"
          command: |
            rm ./tests/pytest/output/*/INPUT/*.nc
            rm ./tests/pytest/output/*/*/*.grb
          when: on_fail
      - store_artifacts:
          path: ./tests/pytest/output
  build_serialized:
    machine:
      docker_layer_caching: true
    environment:
      COMPILED_IMAGE: test-image-serialize
      COMPILED_TAG_NAME: serialize
      CODE_BASE: /Serialize/
      GCR_IMAGE: us.gcr.io/vcm-ml/fv3gfs-compiled:serialize
    steps:
      - run:
          name: Local build handling
          command: |
            if [[ ${CIRCLE_SHELL_ENV} =~ "localbuild" ]]; then
              if [ -d /workdir ]; then
                ln -s /workdir /tmp/_circleci_local_build_repo
              else
                echo "Run this local build using: circleci build -v \$(pwd):/workdir"
                exit 1
              fi
            fi
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update
      - run: make build_serialize
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "download_inputdata.sh" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: bash download_inputdata.sh
      - save_cache:
          paths:
            - ./inputdata
          key: v1-dependencies-{{ checksum "download_inputdata.sh" }}
      # tests
      - run: bash tests/test_output_netcdfs_identical.sh
      #- gcp-gcr/gcr-auth
      #- run: |
      #    if [[ "$CIRCLE_BRANCH" == "master" ]]
      #    then
      #        docker tag $COMPILED_IMAGE $GCR_IMAGE
      #        docker push $GCR_IMAGE
      #    fi
=======
     
>>>>>>> master
workflows:
  version: 2
  build:
    jobs:
      - build_default
