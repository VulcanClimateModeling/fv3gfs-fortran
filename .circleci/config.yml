version: 2.1
orbs:
  gcp-gcr: circleci/gcp-gcr@0.6.1
jobs:
  build_32:
    machine:
      docker_layer_caching: true
    environment:
      COMPILED_IMAGE: us.gcr.io/vcm-ml/fv3gfs-compiled-32bit:latest
      COMPILED_TAG_NAME: 32bit
      COMPILE_OPTION: 32BIT=Y
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update
      - run: make build
      # download inputdata
      - restore_cache:
          keys:
            - v1.1-inputdata-{{ checksum "download_inputdata.sh" }}
            # fallback to using the latest cache if no exact match is found
            - v1.1-inputdata-
      - run: bash download_inputdata.sh
      - save_cache:
          paths:
            - ./fv3gfs-data-docker_2020-01-13.tar.gz
          key: v1.1-inputdata-{{ checksum "download_inputdata.sh" }}
      # tests
      - run: bash tests/test_output_netcdfs_identical.sh
      #- gcp-gcr/gcr-auth
      #- run: |
      #    if [[ "$CIRCLE_BRANCH" == "master" ]]
      #    then
      #        docker push $GCR_IMAGE
      #    fi
  build_default:
    machine:
      docker_layer_caching: true
    environment:
      COMPILED_IMAGE: us.gcr.io/vcm-ml/fv3gfs-compiled-default:latest
      COMPILED_TAG_NAME: default
    steps:
      - run:
          name: Local build handling
          command: |
            if [[ ${CIRCLE_SHELL_ENV} =~ "localbuild" ]]; then
              if [ -d /workdir ]; then
                ln -s /workdir /tmp/_circleci_local_build_repo
              else
                echo "Run this local build using: circleci build -v \$(pwd):/workdir"
                exit 1
              fi
            fi
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update
      - run: make build
      # download inputdata
      - restore_cache:
          keys:
            - v1.1-inputdata-{{ checksum "download_inputdata.sh" }}
            # fallback to using the latest cache if no exact match is found
            - v1.1-inputdata-
      - run: bash download_inputdata.sh
      - save_cache:
          paths:
            - ./fv3gfs-data-docker_2020-01-13.tar.gz
          key: v1.1-inputdata-{{ checksum "download_inputdata.sh" }}
      # tests
      - run: bash tests/test_output_netcdfs_identical.sh
      - run: bash tests/test_regression_fails_for_900s_timestep.sh
      #- run: TARGET=cpu REAL_TYPE=double bash tests/testsuite.sh
      - run: echo $ENCODED_GCR_KEY > ${HOME}/gcloud-service-key.json
      #- gcp-gcr/gcr-auth
      #- run: |
      #    if [[ "$CIRCLE_BRANCH" == "master" ]]
      #    then
      #        docker tag $COMPILED_IMAGE $GCR_IMAGE
      #        docker push $GCR_IMAGE
      #    fi
  build_serialized:
    machine:
      docker_layer_caching: true
    environment:
      COMPILED_IMAGE: test-image-serialize
      COMPILED_TAG_NAME: serialize
      CODE_BASE: /Serialize/
      GCR_IMAGE: us.gcr.io/vcm-ml/fv3gfs-compiled-serialize:latest
    steps:
      - run:
          name: Local build handling
          command: |
            if [[ ${CIRCLE_SHELL_ENV} =~ "localbuild" ]]; then
              if [ -d /workdir ]; then
                ln -s /workdir /tmp/_circleci_local_build_repo
              else
                echo "Run this local build using: circleci build -v \$(pwd):/workdir"
                exit 1
              fi
            fi
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update
      - run: make build_serialize
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "download_inputdata.sh" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: bash download_inputdata.sh
      - save_cache:
          paths:
            - ./inputdata
          key: v1-dependencies-{{ checksum "download_inputdata.sh" }}
      # tests
      - run: bash tests/test_output_netcdfs_identical.sh
      #- gcp-gcr/gcr-auth
      #- run: |
      #    if [[ "$CIRCLE_BRANCH" == "master" ]]
      #    then
      #        docker tag $COMPILED_IMAGE $GCR_IMAGE
      #        docker push $GCR_IMAGE
      #    fi
workflows:
  version: 2
  build:
    jobs:
      #- build_32
      - build_default
