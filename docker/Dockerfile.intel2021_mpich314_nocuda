###
### Stage 0: Build MPI
###

FROM intel/oneapi-hpckit:devel-ubuntu18.04 AS mpich-bld

RUN apt-get update && \
    apt-get install -y wget make libssl-dev 

RUN wget -q http://www.mpich.org/static/downloads/3.1.4/mpich-3.1.4.tar.gz && \
    tar xzf mpich-3.1.4.tar.gz && \
    cd mpich-3.1.4 && \
    CC=icc CXX=icpc FC=ifort ./configure --enable-fortran --enable-cxx --prefix=/usr --enable-fast=all,O3 && \
    make -j24 && make install && ldconfig && \
    cd .. && rm -rf mpich-3.1.4*

ENV OMP_NUM_THREADS=1 

###
### Stage 1: Build NCEP libraries
###

FROM mpich-bld AS ncep-bld 

RUN apt-get update && apt-get install -y git && \
    git config --global http.sslverify false && \
    git clone https://github.com/NCAR/NCEPlibs.git && \
    cd NCEPlibs && \
    git checkout 3da51e139d5cd731c9fc27f39d88cb4e1328212b && \
    mkdir -p /myapps/ncep/lib && \
    export PATH=/usr/bin:$PATH && \
    echo "y" | ./make_ncep_libs.sh -s cheyenne -c intel -d /myapps/ncep -o 1 && \ 
    mv *.a /myapps/ncep/lib && cd .. && rm -rf NCEPlibs

###
### Stage 2: Build zlib, HDF5 and NetCDF libraries 
###

FROM intel/oneapi-hpckit:devel-ubuntu18.04 AS io-bld

RUN apt-get update && \
    apt-get install -y make autoconf libtool m4 git wget && \
    wget -q https://zlib.net/zlib-1.2.11.tar.gz && \
    mkdir -p /myapps/zlib && \
    tar xzf zlib-1.2.11.tar.gz && cd zlib-1.2.11 && \
    CC=icc ./configure --prefix=/myapps/zlib && \
    make -j8 && make install && \
    cd .. && rm -rf zlib*

RUN git clone -b hdf5_1_10_7 https://bitbucket.hdfgroup.org/scm/hdffv/hdf5.git && \
    mkdir -p /myapps/hdf5 && \ 
    cd hdf5 && \
    autoreconf -i && \
    CC=icc FC=ifort CXX=icpc ./configure --with-zlib=/myapps/zlib --enable-build-mode=production --disable-tests --disable-tools --enable-fortran --prefix=/myapps/hdf5 && \
    make -j 24 && make install && \
    cd .. && rm -rf hdf5*

RUN wget -q https://www.unidata.ucar.edu/downloads/netcdf/ftp/netcdf-c-4.7.4.tar.gz && \
    tar xzf netcdf-c-4.7.4.tar.gz && \
    mkdir -p /myapps/netcdf && \  
    cd netcdf-c-4.7.4 && \
    CC=icc CXX=icpc CPPFLAGS="-I/myapps/zlib/include -I/myapps/hdf5/include" LDFLAGS="-L/myapps/zlib/lib -L/myapps/hdf5/lib" ./configure --prefix=/myapps/netcdf --disable-dap --disable-testsets --disable-utilities && \
    make -j 24 && make install && \
    cd .. && rm -rf netcdf-c* 

RUN wget -q https://www.unidata.ucar.edu/downloads/netcdf/ftp/netcdf-fortran-4.5.3.tar.gz && \
    mkdir -p /myapps/netcdf-fortran && \
    tar xzf netcdf-fortran-4.5.3.tar.gz && \ 
    cd netcdf-fortran-4.5.3 && \
    export LD_LIBRARY_PATH=/myapps/zlib/lib:/myapps/hdf5/lib:/myapps/netcdf/lib:${LD_LIBRARY_PATH} && \
    CC=icc FC=ifort F77=ifort CPPFLAGS="-I/myapps/zlib/include -I/myapps/hdf5/include -I/myapps/netcdf/include" LDFLAGS="-L/myapps/zlib/lib -L/myapps/hdf5/lib -L/myapps/netcdf/lib" ./configure --prefix=/myapps/netcdf && \    
    make -j 24 && make install && \
    cd .. && rm -rf netcdf*

###
### Stage 3: Build ESMF library and modules
###

FROM mpich-bld AS esmf-bld

COPY --from=io-bld /myapps/ /myapps/

RUN apt-get update && \
    apt-get install -y git  

RUN export ESMF_DIR=/esmf && \
    export ESMF_INSTALL_PREFIX=/myapps/esmf && \
    export ESMF_COMPILER=intel && \
    export ESMF_COMM=mpich3 && \
    export ESMF_LAPACK_LIBPATH=/opt/intel/oneapi/mkl/latest/lib/intel64 && \
    export ESMF_LAPACK=mkl && \
    export ESMF_NETCDF_INCLUDE=/myapps/netcdf/include && \
    export ESMF_NETCDF_LIBS="-L/myapps/netcdf/lib -lnetcdf -lnetcdff" && \
    export ESMF_BOPT=O3 && \
    export LD_LIBRARY_PATH=/opt/intel/oneapi/mkl/latest/lib/intel64:/myapps/zlib/lib:/myapps/hdf5/lib:/myapps/netcdf/lib:$LD_LIBRARY_PATH && \
    git clone -b ESMF_8_0_0 --depth 1 https://git.code.sf.net/p/esmf/esmf && \
    export PATH=/usr/bin:$PATH && \
    cd esmf && make -j24 lib 
 
RUN mkdir -p /myapps/esmf/include && mkdir -p /myapps/esmf/lib && \
    cd /esmf/lib/libO3/Linux.intel.64.mpich3.default/ && \
    cp *.so /myapps/esmf/lib/ && cp *.a /myapps/esmf/lib/ && cp esmf.mk /myapps/esmf/lib/ && \
    cd /esmf/mod/modO3/Linux.intel.64.mpich3.default && \
    cp *.mod /myapps/esmf/include/ && \
    cd /esmf/src/include && \ 
    cp *.h /myapps/esmf/include/

###
### Stage 4: Build the FMS library and modules
###

FROM mpich-bld AS fms-bld

COPY --from=io-bld /myapps/ /myapps/

RUN apt-get update && \
    apt-get install -y git autoconf libtool m4 bats 

RUN git clone https://github.com/VulcanClimateModeling/fv3gfs-fortran.git && \
    mkdir -p /myapps/fms && \
    cd fv3gfs-fortran/FMS && \
    export PATH=/usr/bin:$PATH && \
    export CC=/usr/bin/mpicc FC=/usr/bin/mpif90 LDFLAGS="-L/usr/lib -L/myapps/netcdf/lib -L/myapps/hdf5/lib -L/opt/intel/oneapi/mkl/latest/lib/intel64" && \
    export LOG_DRIVER_FLAGS="--comments" && \
    export CPPFLAGS="-I/myapps/netcdf/include -I/myapps/hdf5/include -I/opt/intel/oneapi/mkl/latest/include -Duse_LARGEFILE -DMAXFIELDMETHODS_=500 -DGFS_PHYS" && \ 
    export FCFLAGS="-fno-alias -auto -safe-cray-ptr -ftz -assume byterecl -nowarn -sox -align array64byte -i4 -real-size 64 -no-prec-div -no-prec-sqrt -qopenmp" && \
    export LD_LIBRARY_PATH=/myapps/zlib/lib:/myapps/hdf5/lib:/myapps/netcdf/lib:$LD_LIBRARY_PATH && \
    autoreconf -i && \ 
    ./configure --prefix=/myapps/fms && \
    make -j24 && make install 

###
### Stage 5: Compile FV3
###

FROM esmf-bld AS fv3-bld 

COPY --from=io-bld /myapps/ /myapps/
COPY --from=fms-bld /myapps/fms/ /myapps/fms/
COPY --from=ncep-bld /myapps/ncep/ /myapps/ncep/

RUN git clone -b feature/jenkins https://github.com/VulcanClimateModeling/fv3gfs-fortran.git && \
    cd fv3gfs-fortran/FV3 && \
    cp conf/configure.fv3.linux_intel conf/configure.fv3 && \
    export MPI_CC=/usr/bin/mpicc MPI_F90=/usr/bin/mpif90 && \
    export FMS_DIR=/myapps/fms && \
    export ESMF_DIR=/myapps/esmf ESMF_INC="-I/myapps/esmf/include" && \
    export NCEPLIBS_DIR=/myapps/ncep && \
    export NETCDF_ROOT=/myapps/netcdf && \
    export LD_LIBRARY_PATH=/myapps/esmf/lib:/myapps/fms/lib:/myapps/hdf5/lib:/myapps/zlib/lib:/myapps/netcdf/lib:$LD_LIBRARY_PATH && \
    make clean_no_dycore && make libs_no_dycore -j8 && \
    cd atmos_cubed_sphere && make clean && \
    cd .. && make -j24 && \
    mkdir -p /myapps/fv3 && cp fv3.exe /myapps/fv3 && \
    cd ../.. && rm -rf fv3gfs-fortran

ENV LD_LIBRARY_PATH=/myapps/esmf/lib:/myapps/fms/lib:/myapps/hdf5/lib:/myapps/zlib/lib:/myapps/netcdf/lib:$LD_LIBRARY_PATH \
    OMP_NUM_THREADS=1
